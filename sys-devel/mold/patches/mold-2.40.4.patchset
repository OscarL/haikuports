From 5030c3ef00a297d367166b0af3845b61f5da9180 Mon Sep 17 00:00:00 2001
From: Oscar Lesta <oscar.lesta@gmail.com>
Date: Thu, 30 Oct 2025 05:39:16 -0300
Subject: Manually applied changes from HaikuPort's tbb-2022.0.0.patchset


diff --git a/third-party/tbb/cmake/compilers/Clang.cmake b/third-party/tbb/cmake/compilers/Clang.cmake
index a0297fa..46a68d1 100644
--- a/third-party/tbb/cmake/compilers/Clang.cmake
+++ b/third-party/tbb/cmake/compilers/Clang.cmake
@@ -70,7 +70,9 @@ if (NOT APPLE)
     set(TBB_LIB_LINK_FLAGS ${TBB_LIB_LINK_FLAGS} -Wl,-z,relro,-z,now)
 endif()
 
-set(TBB_COMMON_LINK_LIBS ${CMAKE_DL_LIBS})
+if (NOT HAIKU)
+	set(TBB_COMMON_LINK_LIBS ${CMAKE_DL_LIBS})
+endif()
 
 if (NOT CMAKE_CXX_FLAGS MATCHES "_FORTIFY_SOURCE")
   set(TBB_COMMON_COMPILE_FLAGS ${TBB_COMMON_COMPILE_FLAGS} $<$<NOT:$<CONFIG:Debug>>:-D_FORTIFY_SOURCE=2>)
diff --git a/third-party/tbb/cmake/compilers/GNU.cmake b/third-party/tbb/cmake/compilers/GNU.cmake
index da6b408..15dd098 100644
--- a/third-party/tbb/cmake/compilers/GNU.cmake
+++ b/third-party/tbb/cmake/compilers/GNU.cmake
@@ -26,7 +26,7 @@ else()
     set(TBB_DEF_FILE_PREFIX lin${TBB_ARCH})
 endif()
 
-set(TBB_WARNING_LEVEL -Wall -Wextra $<$<BOOL:${TBB_STRICT}>:-Werror> -Wfatal-errors)
+set(TBB_WARNING_LEVEL -Wall -Wextra $<$<BOOL:${TBB_STRICT}>:-Werror> -Wfatal-errors -Wno-error=uninitialized -Wno-error=array-bounds -Wno-error=use-after-free -Wno-error=address -Wno-error=sizeof-array-div)
 set(TBB_TEST_WARNING_FLAGS -Wshadow -Wcast-qual -Woverloaded-virtual -Wnon-virtual-dtor)
 
 # Depfile options (e.g. -MD) are inserted automatically in some cases.
@@ -71,7 +71,9 @@ if (CMAKE_SYSTEM_PROCESSOR MATCHES "(AMD64|amd64|i.86|x86)" AND NOT EMSCRIPTEN)
     set(TBB_COMMON_COMPILE_FLAGS ${TBB_COMMON_COMPILE_FLAGS} -mrtm $<$<AND:$<NOT:$<CXX_COMPILER_ID:Intel>>,$<NOT:$<VERSION_LESS:${CMAKE_CXX_COMPILER_VERSION},11.0>>>:-mwaitpkg>)
 endif()
 
-set(TBB_COMMON_LINK_LIBS ${CMAKE_DL_LIBS})
+if (NOT HAIKU)
+	set(TBB_COMMON_LINK_LIBS ${CMAKE_DL_LIBS})
+endif()
 
 # Ignore -Werror set through add_compile_options() or added to CMAKE_CXX_FLAGS if TBB_STRICT is disabled.
 if (NOT TBB_STRICT AND COMMAND tbb_remove_compile_flag)
diff --git a/third-party/tbb/include/oneapi/tbb/detail/_config.h b/third-party/tbb/include/oneapi/tbb/detail/_config.h
index 1bcd75f..c9c0b0f 100644
--- a/third-party/tbb/include/oneapi/tbb/detail/_config.h
+++ b/third-party/tbb/include/oneapi/tbb/detail/_config.h
@@ -276,7 +276,7 @@
     #define __TBB_CPP20_COMPARISONS_PRESENT 0
 #endif
 
-#define __TBB_RESUMABLE_TASKS                           (!__TBB_WIN8UI_SUPPORT && !__ANDROID__ && !__QNXNTO__ && (!__linux__ || __GLIBC__))
+#define __TBB_RESUMABLE_TASKS                           (!__TBB_WIN8UI_SUPPORT && !__ANDROID__ && !__HAIKU__ && !__QNXNTO__ && (!__linux__ || __GLIBC__))
 
 /* This macro marks incomplete code or comments describing ideas which are considered for the future.
  * See also for plain comment with TODO and FIXME marks for small improvement opportunities.
@@ -495,6 +495,11 @@
     #define TBB_ALLOCATOR_TRAITS_BROKEN 1
 #endif
 
+// HAIKU build fix
+#if defined(__HAIKU__)
+    #define TBB_ALLOCATOR_TRAITS_BROKEN 1
+#endif
+
 // GCC 4.8 C++ standard library implements std::this_thread::yield as no-op.
 #if __TBB_GLIBCXX_VERSION >= 40800 && __TBB_GLIBCXX_VERSION < 40900
     #define __TBB_GLIBCXX_THIS_THREAD_YIELD_BROKEN 1
diff --git a/third-party/tbb/include/oneapi/tbb/detail/_export.h b/third-party/tbb/include/oneapi/tbb/detail/_export.h
index 24b6c08..dae3d8a 100644
--- a/third-party/tbb/include/oneapi/tbb/detail/_export.h
+++ b/third-party/tbb/include/oneapi/tbb/detail/_export.h
@@ -21,7 +21,7 @@
     #define __TBB_EXPORT __declspec(dllexport)
 #elif defined(_WIN32) // Use .def files for these
     #define __TBB_EXPORT
-#elif defined(__unix__) || defined(__APPLE__) // Use .def files for these
+#elif defined(__unix__) || defined(__APPLE__) || defined(__HAIKU__) // Use .def files for these
     #define __TBB_EXPORT __attribute__ ((visibility ("default")))
 #else
     #error "Unknown platform/compiler"
diff --git a/third-party/tbb/src/tbb/allocator.cpp b/third-party/tbb/src/tbb/allocator.cpp
index 689c512..559ddf7 100644
--- a/third-party/tbb/src/tbb/allocator.cpp
+++ b/third-party/tbb/src/tbb/allocator.cpp
@@ -40,7 +40,7 @@
 // memalign() and it offers nothing but overhead due to inconvenient interface. This is likely the case with other
 // standard libraries as well, and more libraries can be added to the preprocessor check below. Unfortunately, we
 // can't detect musl, so we simply enable memalign() on Linux and Android in general.
-#if defined(linux) || defined(__linux) || defined(__linux__) || defined(__ANDROID__)
+#if defined(linux) || defined(__linux) || defined(__linux__) || defined(__ANDROID__) || defined(__HAIKU__)
 #include <malloc.h> // memalign
 #define __TBB_USE_MEMALIGN
 #else
@@ -119,7 +119,7 @@ static const dynamic_link_descriptor MallocLinkTable[] = {
 #define MALLOCLIB_NAME "tbbmalloc" DEBUG_SUFFIX ".dll"
 #elif __APPLE__
 #define MALLOCLIB_NAME "libtbbmalloc" DEBUG_SUFFIX ".2.dylib"
-#elif __FreeBSD__ || __NetBSD__ || __OpenBSD__ || __sun || _AIX || __ANDROID__
+#elif __FreeBSD__ || __NetBSD__ || __OpenBSD__ || __sun || _AIX || __ANDROID__ || __HAIKU__
 #define MALLOCLIB_NAME "libtbbmalloc" DEBUG_SUFFIX ".so"
 #elif __unix__  // Note that order of these #elif's is important!
 #define MALLOCLIB_NAME "libtbbmalloc" DEBUG_SUFFIX ".so.2"
diff --git a/third-party/tbb/src/tbb/dynamic_link.cpp b/third-party/tbb/src/tbb/dynamic_link.cpp
index a21beb5..d656e38 100644
--- a/third-party/tbb/src/tbb/dynamic_link.cpp
+++ b/third-party/tbb/src/tbb/dynamic_link.cpp
@@ -389,7 +389,11 @@ namespace r1 {
     #endif /* !__TBB_DYNAMIC_LOAD_ENABLED */
         // RTLD_GLOBAL - to guarantee that old TBB will find the loaded library
         // RTLD_NOLOAD - not to load the library without the full path
-        library_handle = dlopen(library, RTLD_LAZY | RTLD_GLOBAL | RTLD_NOLOAD);
+	#ifndef __HAIKU__
+		library_handle = dlopen(library, RTLD_LAZY | RTLD_GLOBAL | RTLD_NOLOAD);
+	#else
+		library_handle = dlopen(library, RTLD_NOW | RTLD_GLOBAL); // [OscarL]: re-check. we've seen issues on other projects when using RTLD_LAZY
+	#endif
 #endif /* _WIN32 */
         if (library_handle) {
             if (!resolve_symbols(library_handle, descriptors, required)) {
diff --git a/third-party/tbb/src/tbb/rml_tbb.cpp b/third-party/tbb/src/tbb/rml_tbb.cpp
index d1cd285..db61654 100644
--- a/third-party/tbb/src/tbb/rml_tbb.cpp
+++ b/third-party/tbb/src/tbb/rml_tbb.cpp
@@ -50,7 +50,7 @@ namespace rml {
 #define RML_SERVER_NAME "irml" DEBUG_SUFFIX ".dll"
 #elif __APPLE__
 #define RML_SERVER_NAME "libirml" DEBUG_SUFFIX ".1.dylib"
-#elif __FreeBSD__ || __NetBSD__ || __OpenBSD__ || __sun || _AIX
+#elif __FreeBSD__ || __NetBSD__ || __OpenBSD__ || __sun || _AIX || __HAIKU__
 #define RML_SERVER_NAME "libirml" DEBUG_SUFFIX ".so"
 #elif __unix__
 #define RML_SERVER_NAME "libirml" DEBUG_SUFFIX ".so.1"
diff --git a/third-party/tbb/src/tbbmalloc/frontend.cpp b/third-party/tbb/src/tbbmalloc/frontend.cpp
index f05aff2..1315e33 100644
--- a/third-party/tbb/src/tbbmalloc/frontend.cpp
+++ b/third-party/tbb/src/tbbmalloc/frontend.cpp
@@ -776,7 +776,7 @@ static inline unsigned int highestBitPos(unsigned int n)
     unsigned int pos;
 #if __ARCH_x86_32||__ARCH_x86_64
 
-# if __unix__||__APPLE__||__MINGW32__
+# if __unix__||__APPLE__||__MINGW32__||__HAIKU__
     __asm__ ("bsr %1,%0" : "=r"(pos) : "r"(n));
 # elif (_WIN32 && (!_WIN64 || __INTEL_COMPILER))
     __asm
diff --git a/third-party/tbb/src/tbbmalloc/tbbmalloc.cpp b/third-party/tbb/src/tbbmalloc/tbbmalloc.cpp
index b72e03a..938f1fe 100644
--- a/third-party/tbb/src/tbbmalloc/tbbmalloc.cpp
+++ b/third-party/tbb/src/tbbmalloc/tbbmalloc.cpp
@@ -43,7 +43,7 @@ namespace internal {
 #define MALLOCLIB_NAME "tbbmalloc" DEBUG_SUFFIX ".dll"
 #elif __APPLE__
 #define MALLOCLIB_NAME "libtbbmalloc" DEBUG_SUFFIX ".2.dylib"
-#elif __FreeBSD__ || __NetBSD__ || __OpenBSD__ || __sun || _AIX || __ANDROID__
+#elif __FreeBSD__ || __NetBSD__ || __OpenBSD__ || __sun || _AIX || __ANDROID__ || __HAIKU__
 #define MALLOCLIB_NAME "libtbbmalloc" DEBUG_SUFFIX ".so"
 #elif __unix__
 #define MALLOCLIB_NAME "libtbbmalloc" DEBUG_SUFFIX  __TBB_STRING(.so.2)
diff --git a/third-party/tbb/test/common/utils_dynamic_libs.h b/third-party/tbb/test/common/utils_dynamic_libs.h
index 99afca3..e641c8b 100644
--- a/third-party/tbb/test/common/utils_dynamic_libs.h
+++ b/third-party/tbb/test/common/utils_dynamic_libs.h
@@ -58,7 +58,7 @@ namespace utils {
 #define EXT ".dylib"
 #endif
 // Android SDK build system does not support .so file name versioning
-#elif __FreeBSD__ || __NetBSD__ || __OpenBSD__ || __sun || _AIX || __ANDROID__
+#elif __FreeBSD__ || __NetBSD__ || __OpenBSD__ || __sun || _AIX || __ANDROID__ || __HAIKU__
 #define EXT ".so"
 #elif __unix__  // Order of these elif's matters!
 #define EXT __TBB_STRING(.so.2)
diff --git a/third-party/tbb/test/conformance/conformance_resumable_tasks.cpp b/third-party/tbb/test/conformance/conformance_resumable_tasks.cpp
index 70fd878..4b8bfbe 100644
--- a/third-party/tbb/test/conformance/conformance_resumable_tasks.cpp
+++ b/third-party/tbb/test/conformance/conformance_resumable_tasks.cpp
@@ -16,7 +16,7 @@
 
 #include "common/test.h"
 
-#if (!__TBB_WIN8UI_SUPPORT && !defined(WINAPI_FAMILY) && !__ANDROID__)
+#if (!__TBB_WIN8UI_SUPPORT && !defined(WINAPI_FAMILY) && !__ANDROID__ && !__HAIKU__)
 
 #include "oneapi/tbb/task.h"
 #include "oneapi/tbb/task_group.h"
-- 
2.51.0


From e94122489c48d86c1b86838ce3e86d409399b4ec Mon Sep 17 00:00:00 2001
From: Oscar Lesta <oscar.lesta@gmail.com>
Date: Fri, 31 Oct 2025 02:12:09 -0300
Subject: Equate elf_x86_64_haiku to elf_x86_64.


diff --git a/src/cmdline.cc b/src/cmdline.cc
index 3b5e47d..427a142 100644
--- a/src/cmdline.cc
+++ b/src/cmdline.cc
@@ -762,7 +762,7 @@ std::vector<std::string> parse_nonpositional_args(Context<E> &ctx) {
     } else if (read_arg("mllvm")) {
       ctx.arg.plugin_opt.emplace_back(arg);
     } else if (read_arg("m")) {
-      if (arg == "elf_x86_64") {
+      if (arg == "elf_x86_64" || arg == "elf_x86_64_haiku") {
         ctx.arg.emulation = X86_64::name;
       } else if (arg == "elf_i386") {
         ctx.arg.emulation = I386::name;
-- 
2.51.0


From 20c7342f5cce9611b97a60bb2751d8a8a1ee9b65 Mon Sep 17 00:00:00 2001
From: Oscar Lesta <oscar.lesta@gmail.com>
Date: Fri, 31 Oct 2025 05:06:31 -0300
Subject: QnD implementation of get_self_path() on Haiku.

Should help avoid at least most of the crashes on the test suite.

diff --git a/lib/filepath.cc b/lib/filepath.cc
index 988a059..1c8f368 100644
--- a/lib/filepath.cc
+++ b/lib/filepath.cc
@@ -11,6 +11,11 @@
 # include <sys/sysctl.h>
 #endif
 
+#ifdef __HAIKU__
+# include <OS.h>
+# include <cstdlib>
+#endif
+
 namespace mold {
 
 // Returns the path of the mold executable itself
@@ -34,6 +39,22 @@ std::string get_self_path() {
   path.resize(size);
   sysctl(mib, 4, path.data(), &size, NULL, 0);
   return path;
+#elif __HAIKU__
+  // Quick and dirty code.
+  std::string path = "";
+
+  team_info info;
+  status_t status = get_team_info(B_CURRENT_TEAM, &info);
+  if (status != B_OK)
+    return path;
+
+  // only interested on the proc name:
+  path = info.args;
+  int n = path.find(" ");
+  if (n != std::string::npos)
+    path.resize(n);
+
+  return realpath(path.c_str(), NULL);
 #else
   return std::filesystem::read_symlink("/proc/self/exe").string();
 #endif
-- 
2.51.0


From 49866f8b9847559f66fdd1efcd6bd22176a21367 Mon Sep 17 00:00:00 2001
From: Oscar Lesta <oscar.lesta@gmail.com>
Date: Fri, 31 Oct 2025 08:10:53 -0300
Subject: tests: use "lddtree -l" in place of "ldd".


diff --git a/test/mold-wrapper.sh b/test/mold-wrapper.sh
index 9a4e37e..d34bb53 100755
--- a/test/mold-wrapper.sh
+++ b/test/mold-wrapper.sh
@@ -3,7 +3,7 @@
 
 [ "$CC" = cc ] || skip
 
-ldd mold-wrapper.so | grep libasan && skip
+lddtree -l mold-wrapper.so | grep libasan && skip
 
 nm mold | grep '__[at]san_init' && skip
 
diff --git a/test/mold-wrapper2.sh b/test/mold-wrapper2.sh
index 2e4605b..a0adc44 100755
--- a/test/mold-wrapper2.sh
+++ b/test/mold-wrapper2.sh
@@ -1,7 +1,7 @@
 #!/bin/bash
 . $(dirname $0)/common.inc
 
-ldd mold-wrapper.so | grep libasan && skip
+lddtree -l mold-wrapper.so | grep libasan && skip
 nm mold | grep '__[at]san_init' && skip
 
 ./mold -run bash -c 'echo $LD_PRELOAD' | grep -F mold-wrapper.so
-- 
2.51.0


From c0f6c5d48da28b212193ab98685129519dd60e53 Mon Sep 17 00:00:00 2001
From: Oscar Lesta <oscar.lesta@gmail.com>
Date: Fri, 31 Oct 2025 08:53:36 -0300
Subject: tests: use "/bin/ld" instead of "/usr/bin/ld".


diff --git a/test/mold-wrapper.sh b/test/mold-wrapper.sh
index d34bb53..815aef7 100755
--- a/test/mold-wrapper.sh
+++ b/test/mold-wrapper.sh
@@ -26,38 +26,38 @@ extern char **environ;
 
 int main(int argc, char **argv) {
   if (!strcmp(argv[1], "execl")) {
-    execl("/usr/bin/ld", "/usr/bin/ld", "execl", (char *)0);
+    execl("/bin/ld", "/bin/ld", "execl", (char *)0);
     perror("execl");
     return 1;
   }
 
   if (!strcmp(argv[1], "execlp")) {
-    execlp("/usr/bin/ld", "/usr/bin/ld", "execlp", (char *)0);
+    execlp("/bin/ld", "/bin/ld", "execlp", (char *)0);
     perror("execl");
     return 1;
   }
 
   if (!strcmp(argv[1], "execle")) {
-    execle("/usr/bin/ld", "/usr/bin/ld", "execle", (char *)0, environ);
+    execle("/bin/ld", "/bin/ld", "execle", (char *)0, environ);
     perror("execl");
     return 1;
   }
 
   if (!strcmp(argv[1], "execv")) {
-    execv("/usr/bin/ld", (char *[]){"/usr/bin/ld", "execv", (char *)0});
+    execv("/bin/ld", (char *[]){"/bin/ld", "execv", (char *)0});
     perror("execl");
     return 1;
   }
 
   if (!strcmp(argv[1], "execvp")) {
-    execvp("/usr/bin/ld", (char *[]){"/usr/bin/ld", "execvp", (char *)0});
+    execvp("/bin/ld", (char *[]){"/bin/ld", "execvp", (char *)0});
     perror("execl");
     return 1;
   }
 
   if (!strcmp(argv[1], "execvpe")) {
     char *env[] = {"FOO=bar", NULL};
-    execvpe("/usr/bin/ld", (char *[]){"/usr/bin/ld", "execvpe", (char *)0}, env);
+    execvpe("/bin/ld", (char *[]){"/bin/ld", "execvpe", (char *)0}, env);
     perror("execl");
     return 1;
   }
-- 
2.51.0

