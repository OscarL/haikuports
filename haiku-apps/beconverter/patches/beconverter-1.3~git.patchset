From 88f976db1efb27c0b0b51c3087979719aea4fc13 Mon Sep 17 00:00:00 2001
From: Oscar Lesta <oscar.lesta@gmail.com>
Date: Wed, 28 Dec 2022 04:00:36 -0300
Subject: Initial patch for Haiku beta4


diff --git a/Source/BeConverter.cpp b/Source/BeConverter.cpp
index 5e907bd..da6e4e0 100644
--- a/Source/BeConverter.cpp
+++ b/Source/BeConverter.cpp
@@ -24,7 +24,7 @@
 #include "Box1.h"
 #include "CatListView.h"
 
-#include <fstream.h>
+#include <fstream>
 #include <stdio.h>
 #include <stdlib.h>
 
@@ -41,6 +41,8 @@
 #include <String.h>
 #include <Mime.h>
 
+using namespace std;
+
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
 BeConverter::BeConverter()
@@ -73,7 +75,7 @@ void BeConverter::ReadyToRun ()
 
         fstream f (settings_path, ios::in);
 
-        if (f != NULL)
+        if (f)
         {
             char tempbuf[50];
             char value[100];
@@ -121,13 +123,13 @@ void BeConverter::MessageReceived (BMessage *message)
                 // Open a temp file and write the index to it
                 // Then that index will be accessed using a BDirectory's
                 // GetNextEntry method.
-                find_directory (B_COMMON_TEMP_DIRECTORY, &path, true);
+                find_directory (B_SYSTEM_TEMP_DIRECTORY, &path, true);
                 sprintf (tempfile, "%s/Bec937373866", path.Path ());
 
                 fstream f (tempfile, ios::out);
 
                 long x = -1;
-                if (f != NULL)
+                if (f)
                 {
                     x = (long)mainWindow->mainView->box1->catList->CurrentSelection ();
 
@@ -262,7 +264,7 @@ bool BeConverter::QuitRequested ()
 {
     // Delete the temporary file created by BeConverter
     BPath path;
-    find_directory (B_COMMON_TEMP_DIRECTORY, &path, false);
+    find_directory (B_SYSTEM_TEMP_DIRECTORY, &path, false);
 
     char temp_file [B_PATH_NAME_LENGTH];
     sprintf (temp_file, "%s/Bec937373866", path.Path());
diff --git a/Source/Box1.cpp b/Source/Box1.cpp
index 5fb0b61..79a1e03 100644
--- a/Source/Box1.cpp
+++ b/Source/Box1.cpp
@@ -31,7 +31,7 @@
 #include <Entry.h>
 #include <Path.h>
 #include <String.h>
-#include <iostream.h>
+#include <iostream>
 #include <Roster.h>
 #include <stdio.h>
 #include <Bitmap.h>
diff --git a/Source/ConverterView.cpp b/Source/ConverterView.cpp
index c5e71c5..9d76a4a 100644
--- a/Source/ConverterView.cpp
+++ b/Source/ConverterView.cpp
@@ -23,7 +23,7 @@
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>
-#include <fstream.h>
+#include <fstream>
 
 #include <TextControl.h>
 #include <Application.h>
@@ -48,6 +48,9 @@
 #include <TranslationUtils.h>
 #include <Button.h>
 
+
+using namespace std;
+
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
 ConverterView::ConverterView (const char *dir)
@@ -112,7 +115,7 @@ ConverterView::ConverterView (const char *dir)
     fstream f(settings_path, ios::in);
 
     xcalc.UseDegrees();     // By default set to degrees
-    if (f != NULL)
+    if (f)
     {
         char tempbuf[50];
         char value[100];
@@ -488,7 +491,7 @@ void ConverterView::MessageRecd (BMessage *message)
 
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
-void ConverterView::Calculate (int new_base, const char* text = NULL)
+void ConverterView::Calculate (int new_base, const char* text)
 {
     // Convert It!!!
     double acv;
diff --git a/Source/ConverterView.h b/Source/ConverterView.h
index 5d0e553..fe41be5 100644
--- a/Source/ConverterView.h
+++ b/Source/ConverterView.h
@@ -21,10 +21,11 @@
 #include <View.h>
 #include "XEvaluator.h"
 
-class MenuField;
-class PopUpMenu;
-class RadioButton;
-class Button;
+class BCheckBox;
+class BMenuField;
+class BPopUpMenu;
+class BRadioButton;
+class BButton;
 class BStringView;
 class BTextControl;
 
diff --git a/Source/ConverterWindow.cpp b/Source/ConverterWindow.cpp
index 64f2a41..cfbe06f 100644
--- a/Source/ConverterWindow.cpp
+++ b/Source/ConverterWindow.cpp
@@ -22,10 +22,10 @@
 #include "ConverterView.h"
 
 #include <Alert.h>
-#include <fstream.h>
+#include <fstream>
 #include <stdlib.h>
 #include <stdio.h>
-#include <iostream.h>
+#include <iostream>
 #include <Directory.h>
 #include <Rect.h>
 #include <Path.h>
@@ -34,6 +34,8 @@
 #include <Roster.h>
 #include <String.h>
 
+using namespace std;
+
 long nunits;
 
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@@ -59,7 +61,7 @@ ConverterWindow::ConverterWindow()
     udir.SetTo (units_path);
 
     BPath path, unitpath;
-    find_directory (B_COMMON_TEMP_DIRECTORY, &path, true);
+    find_directory (B_SYSTEM_TEMP_DIRECTORY, &path, true);
 
     char f[B_PATH_NAME_LENGTH];
     sprintf (f, "%s/Bec937373866", path.Path());
@@ -110,7 +112,7 @@ ConverterWindow::ConverterWindow()
     long left_coord = 80+130;
     long top_coord = 22+50;
 
-    if (fwp != NULL)
+    if (fwp)
     {
         char setting[10];
         char value[30];
@@ -174,7 +176,7 @@ bool ConverterWindow::QuitRequested(void)
     fstream f (settings_path, ios::out);
 
     // If fstream init failed
-    if (f == NULL)
+    if (!f)
     {
         BAlert *fatal_alert;
         char error[B_PATH_NAME_LENGTH + 1000];
diff --git a/Source/MainWindow.cpp b/Source/MainWindow.cpp
index 8a4ee34..c5049eb 100644
--- a/Source/MainWindow.cpp
+++ b/Source/MainWindow.cpp
@@ -21,7 +21,7 @@
 #include "Box1.h"
 #include "CatListView.h"    // new
 
-#include <fstream.h>
+#include <fstream>
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>
@@ -41,6 +41,8 @@
 #include <View.h>
 #include <ListView.h>
 
+using namespace std;
+
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
 MainWindow::MainWindow ()
@@ -63,7 +65,7 @@ MainWindow::MainWindow ()
     float scrollval = 0;
     long selectindex = 0;
 
-    if (f != NULL)
+    if (f)
     {
         char setting[10];
         char value[30];
@@ -128,7 +130,7 @@ bool MainWindow::QuitRequested ()
     fstream f (settings_path, ios::out);
 
     // If fstream init failed
-    if (f == NULL)
+    if (!f)
     {
         BAlert *fatal_alert;
         char error[B_PATH_NAME_LENGTH + 1000];
diff --git a/Source/Makefile b/Source/Makefile
new file mode 100644
index 0000000..1677a0e
--- /dev/null
+++ b/Source/Makefile
@@ -0,0 +1,146 @@
+## Haiku Generic Makefile v2.6 ##
+
+## Fill in this file to specify the project being created, and the referenced
+## Makefile-Engine will do all of the hard work for you. This handles any
+## architecture of Haiku.
+##
+## For more information, see:
+## file:///system/develop/documentation/makefile-engine.html
+
+# The name of the binary.
+NAME = ../BeConverter
+
+# The type of binary, must be one of:
+#	APP:	Application
+#	SHARED:	Shared library or add-on
+#	STATIC:	Static library archive
+#	DRIVER: Kernel driver
+TYPE = APP
+
+# If you plan to use localization, specify the application's MIME signature.
+APP_MIME_SIG =
+
+#	The following lines tell Pe and Eddie where the SRCS, RDEFS, and RSRCS are
+#	so that Pe and Eddie can fill them in for you.
+#%{
+# @src->@
+
+#	Specify the source files to use. Full paths or paths relative to the
+#	Makefile can be included. All files, regardless of directory, will have
+#	their object files created in the common object directory. Note that this
+#	means this Makefile will not work correctly if two source files with the
+#	same name (source.c or source.cpp) are included from different directories.
+#	Also note that spaces in folder names do not work well with this Makefile.
+SRCS = \
+	BeConverter.cpp \
+	Box1.cpp \
+	CategoryItem.cpp \
+	CatListView.cpp \
+	ConverterView.cpp \
+	ConverterWindow.cpp \
+	MainView.cpp \
+	MainWindow.cpp \
+	OptionsView.cpp \
+	OptionsWindow.cpp \
+	StaticLabel.cpp \
+
+#	Specify the resource definition files to use. Full or relative paths can be
+#	used.
+RDEFS = \
+
+
+#	Specify the resource files to use. Full or relative paths can be used.
+#	Both RDEFS and RSRCS can be utilized in the same Makefile.
+RSRCS = \
+	BeConverter.rsrc
+
+# End Pe/Eddie support.
+# @<-src@
+#%}
+
+#%}
+
+#	Specify libraries to link against.
+#	There are two acceptable forms of library specifications:
+#	-	if your library follows the naming pattern of libXXX.so or libXXX.a,
+#		you can simply specify XXX for the library. (e.g. the entry for
+#		"libtracker.so" would be "tracker")
+#
+#	-	for GCC-independent linking of standard C++ libraries, you can use
+#		$(STDCPPLIBS) instead of the raw "stdc++[.r4] [supc++]" library names.
+#
+#	- 	if your library does not follow the standard library naming scheme,
+#		you need to specify the path to the library and it's name.
+#		(e.g. for mylib.a, specify "mylib.a" or "path/mylib.a")
+LIBS = be $(STDCPPLIBS) translation
+
+#	Specify additional paths to directories following the standard libXXX.so
+#	or libXXX.a naming scheme. You can specify full paths or paths relative
+#	to the Makefile. The paths included are not parsed recursively, so
+#	include all of the paths where libraries must be found. Directories where
+#	source files were specified are	automatically included.
+LIBPATHS =
+
+#	Additional paths to look for system headers. These use the form
+#	"#include <header>". Directories that contain the files in SRCS are
+#	NOT auto-included here.
+SYSTEM_INCLUDE_PATHS =
+
+#	Additional paths paths to look for local headers. These use the form
+#	#include "header". Directories that contain the files in SRCS are
+#	automatically included.
+LOCAL_INCLUDE_PATHS =
+
+#	Specify the level of optimization that you want. Specify either NONE (O0),
+#	SOME (O1), FULL (O3), or leave blank (for the default optimization level).
+OPTIMIZE :=
+
+# 	Specify the codes for languages you are going to support in this
+# 	application. The default "en" one must be provided too. "make catkeys"
+# 	will recreate only the "locales/en.catkeys" file. Use it as a template
+# 	for creating catkeys for other languages. All localization files must be
+# 	placed in the "locales" subdirectory.
+LOCALES =
+
+#	Specify all the preprocessor symbols to be defined. The symbols will not
+#	have their values set automatically; you must supply the value (if any) to
+#	use. For example, setting DEFINES to "DEBUG=1" will cause the compiler
+#	option "-DDEBUG=1" to be used. Setting DEFINES to "DEBUG" would pass
+#	"-DDEBUG" on the compiler's command line.
+DEFINES =
+
+#	Specify the warning level. Either NONE (suppress all warnings),
+#	ALL (enable all warnings), or leave blank (enable default warnings).
+WARNINGS =
+
+#	With image symbols, stack crawls in the debugger are meaningful.
+#	If set to "TRUE", symbols will be created.
+SYMBOLS :=
+
+#	Includes debug information, which allows the binary to be debugged easily.
+#	If set to "TRUE", debug info will be created.
+DEBUGGER :=
+
+#	Specify any additional compiler flags to be used.
+COMPILER_FLAGS =
+
+#	Specify any additional linker flags to be used.
+LINKER_FLAGS =
+
+#	Specify the version of this binary. Example:
+#		-app 3 4 0 d 0 -short 340 -long "340 "`echo -n -e '\302\251'`"1999 GNU GPL"
+#	This may also be specified in a resource.
+APP_VERSION :=
+
+#	(Only used when "TYPE" is "DRIVER"). Specify the desired driver install
+#	location in the /dev hierarchy. Example:
+#		DRIVER_PATH = video/usb
+#	will instruct the "driverinstall" rule to place a symlink to your driver's
+#	binary in ~/add-ons/kernel/drivers/dev/video/usb, so that your driver will
+#	appear at /dev/video/usb when loaded. The default is "misc".
+DRIVER_PATH =
+
+## Include the Makefile-Engine
+DEVEL_DIRECTORY := \
+	$(shell findpaths -r "makefile_engine" B_FIND_PATH_DEVELOP_DIRECTORY)
+include $(DEVEL_DIRECTORY)/etc/makefile-engine
diff --git a/Source/OptionsView.cpp b/Source/OptionsView.cpp
index ea65e85..3997881 100644
--- a/Source/OptionsView.cpp
+++ b/Source/OptionsView.cpp
@@ -20,7 +20,7 @@
 
 #include <stdlib.h>
 #include <stdio.h>
-#include <fstream.h>
+#include <fstream>
 
 #include <Application.h>
 #include <TextView.h>
@@ -35,6 +35,8 @@
 #include <TranslationUtils.h>
 #include <Entry.h>
 
+using namespace std;
+
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
 OptionsView::OptionsView()
@@ -89,7 +91,7 @@ OptionsView::OptionsView()
 
     fstream f (settings_path, ios::in);
 
-    if (f != NULL)
+    if (f)
     {
         char tempbuf[50];
         char value[100];
diff --git a/Source/OptionsWindow.cpp b/Source/OptionsWindow.cpp
index b0d4974..3797aa9 100644
--- a/Source/OptionsWindow.cpp
+++ b/Source/OptionsWindow.cpp
@@ -19,7 +19,7 @@
 #include "OptionsWindow.h"
 #include "OptionsView.h"
 
-#include <fstream.h>
+#include <fstream>
 #include <stdlib.h>
 #include <stdio.h>
 
@@ -35,6 +35,8 @@
 #include <TextControl.h>
 #include <CheckBox.h>
 
+using namespace std;
+
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
 OptionsWindow::OptionsWindow ()
@@ -62,7 +64,7 @@ OptionsWindow::OptionsWindow ()
     long left_coord = 250;      // Default position
     long top_coord = 200;       // Default position
 
-    if (f != NULL)
+    if (f)
     {
         char setting[10];
         char value[30];
@@ -157,7 +159,7 @@ void OptionsWindow::Validate_Precision ()
 
             fstream f (settings_path, ios::out);
 
-            if (f == NULL)
+            if (!f)
             {
                 BAlert *fatal_alert;
                 char error[B_PATH_NAME_LENGTH + 1000];
@@ -202,7 +204,7 @@ void OptionsWindow::Validate_Precision ()
         // Use fstream object to open and write to the file
         fstream f (settings_path, ios::out);
 
-        if (f == NULL)
+        if (!f)
         {
             BAlert *fatal_alert;
             char error[B_PATH_NAME_LENGTH + 1000];
@@ -252,7 +254,7 @@ void OptionsWindow::SavePosition ()
     // positions to it
     fstream f2 (winsettings, ios::out);
 
-    if (f2 == NULL)
+    if (!f2)
     {
         BAlert *fatal_alert;
         char error[B_PATH_NAME_LENGTH + 1000];
-- 
2.37.3

